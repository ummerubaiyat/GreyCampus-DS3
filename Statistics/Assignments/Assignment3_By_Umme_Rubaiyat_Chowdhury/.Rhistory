India+Friday <- India_vector[3]
India_Friday <- India_vector[3]
India+Friday
India_Friday
India_Friday
#Subset vector
days_vector <- days_vector[2:3]
#Subset vector
subset_days_vector <- days_vector[2:3]
subset_days_vector
#Subset vector
subset_days_vector <- days_vector[2:3]
subset_days_vector
days_vector <- c("Mon","Wed","Fri","Sun")
#Subset vector
subset_days_vector <- days_vector[2:3]
subset_days_vector
LETTERS
#EXEPT letters
letters[-(6:26)]
matrix(1:9,byrow=False, ncol=3)
Pakistan <- c(980,4399,3599,2533)
Ireland <- c(400,4399,5599,2888)
India <- c(1200,4399,295,2838)
Pakistan <- c(980,4399,3599,2533)
matrix(1:9,byrow=False, ncol=3)
matrix(1:9,byrow = FALSE, ncol=3)
Top_three
Top_three <- c(USA,BANGLADESH,INDIA)
Top_three <- c("USA","BANGLADESH","INDIA")
Top_matrix
Top_matrix <- matrix(Top_three,ncol = 3, byrow = FALSE)
Top_matrix
(Top_three,ncol = 3, byrow = TRUE)
Top_matrix
matrix()
matrix(1:9,byrow = FALSE, ncol=3)
Ireland <- c(400,4399,5599,2888)
India <- c(1200,4399,295,2838)
Pakistan <- c(980,4399,3599,2533)
Top_three <- c(Ireland,India,Pakistan)
Top_matrix <- matrix(Top_three , ncol = 3, byrow = TRUE)
Top_matrix <- matrix(Top_three , ncol = 3, byrow = TRUE)
Top_matrix
colnames(Top_matrix) <- c("Total Case","Total Death")
rownames(Top_matrix)<-c("Ireland","India","Pakistan")
colnames(Top_matrix) <- c("Total Case","Total Death")
Ireland <- c(5599,2888)
India <- c(1200,4399)
Pakistan <- c(3599,2533)
Top_three <- c(Ireland,India,Pakistan)
Top_matrix <- matrix(Top_three , ncol = 3, byrow = TRUE)
Top_matrix
colnames(Top_matrix) <- c("Total Case","Total Death")
rownames(Top_matrix) <- c("Ireland","India","Pakistan")
matrix()
matrix(1:9,byrow = FALSE, ncol=3)
Ireland <- c(5599,2888)
India <- c(1200,4399)
Pakistan <- c(3599,2533)
Top_three <- c(Ireland,India,Pakistan)
Top_three
Top_matrix <- matrix(Top_three , ncol = 3, byrow = TRUE)
Top_matrix
colnames(Top_matrix) <- c("Total Case","Total Death")
matrix(1:9,byrow = FALSE, ncol=3)
Irish <- c(5599,2888)
Indian <- c(1200,4399)
Pakistani <- c(3599,2533)
Ireland <- c(5599,2888)
India <- c(1200,4399)
Pakistan <- c(3599,2533)
Top_three <- c(Ireland,India,Pakistan)
Top_three
Top_matrix <- matrix(Top_three , ncol = 3, byrow = TRUE)
Top_matrix
colnames(Top_matrix) <- c("Total Case","Total Death")
rownames(Top_matrix) <- c("Ireland","India","Pakistan")
Top_matrix
Top_matrix <- matrix(Top_three , nrow = 3, byrow = TRUE)
Top_matrix
colnames(Top_matrix) <- c("Total Case","Total Death")
rownames(Top_matrix) <- c("Ireland","India","Pakistan")
Top_matrix
?matrix
#Different Approach
Top_three <- c(5599,2888,1200,4399,3599,2533)
Top_matrix <- matrix(Top_three,nrow = 3, byrow = TRUE, dimnames= list(c("Ireland","India","Pakistan"),c("Total Case",
"Total Death")))
Top_matrix
m <- matrix(1:100, nrow=4)
m
dim(m)
x <- matrix(1:16, 2,3)
x
x <- matrix(1:6, 2,3)
x
x[1,2]
#Show all col
x[1, ]
#Show all row
x[ ,3 ]
x+y
x <-c(3,1); y <- c(2,4)
x+y
x-y
x*y
install.packages("geometry")
#install.packages("geometry")
library(geometry)
dot(x,y,d=TRUE)
m1 <- matrix(1:6, nrow = 2, byrow = TRUE)
m1
m12 <- matrix(7:12, nrow = 2, byrow = TRUE)
m1
m12 <- matrix(7:12, nrow = 2, byrow = TRUE)
m1
m2 <- matrix(7:12, nrow = 2, byrow = TRUE)
m2
print(m1)
m1 * m2
#2 vector into matrix
v1 <- c(2,5,9)
v1 <- c(4,28,7)
n <- cbind(v1,v2)
n
n <- cbind(v1,v2)
n
v2 <- c(4,28,7)
n <- cbind(v1,v2)
n
print(m1*m2)
print(m1%%m2)
print(m2 %% m1)
T(m1)
t(m1)
x<- 1:6
x
class(x)
is.numeric(x)
y<- c("a", TRUE)
y<- c("a", TRUE)
class(y)
class(y)
as.logical(y)
as.logical(x)
as.character(x)
### Nonsensical coercion
x <- c("Ireland","India","Pakistan")
as.numeric(x)
x <- 1:6
x
y
cbind(x,y)
rbind(x,y)
y <- 10:12
y
cbind(x,y)
rbind(x,y)
gender_vector <- c("Male","Female","Female","Male")
class(gender_vector)
gender_vector
#Convert gender vector to factor
factor_gender_vector <- factor(gender_vector, levels = c("Male","Female"))
factor_gender_vector
class(factor_gender_vector)
levels(factor_gender_vector)
table(speed_vector)
speed_vector <- c("medium","slow","slow","medium","fast","slow")
class(speed_vector)
table(speed_vector)
#
factor_gender_vector <- factor(speed_vector, ordered = TRUE,
levels = c("slow","medium","fast"))
speed_vector <- c(15, TRUE, "World")
speed_vector
class(speed_vector)
subjects_vector <- c("Statistics", "Linear Algebra", "Calculus")
score_vector <- c(95, 91, 88)
names(score_vector) <- subjects_vector
score_vector
typeof(subjects_vector)
typeof(Score_vector)
typeof(Score_vector)
typeof(score_vector)
student_names <- c("Umme", "Rubaiyat", "Chowdhury")
alex_scores <- c(95, 91,88)
nia_scores <- c(96, 94,97)
robin_scores <- c(88, 98, 85)
student_scores <- c(alex_scores, nia_scores, robin_scores)
student_matrix <- matrix(student_scores, nrow=3, byrow=TRUE, dimnames = list(
student_names, subjects_vector))
student_matrix
Student_dataframe <- data.frame(Umme = umme_scores, Rubaiyat = rubaiyat_scores, Chowdhury= chowdhury_scores)
rownames(Student_dataframe) <- Subjects_vector
Student_dataframe
Student_dataframe <- data.frame(Umme = umme_scores, Rubaiyat = rubaiyat_scores, Chowdhury= chowdhury_scores)
dframe <- data.frame(student_matrix)
dframe
countryNames <-  c("Bangladesh", "USA", "India", "Russia", "France")
totalCases <- c(588,132, 30639264,  11734058, 4483471, 4313073)
totalDeath <- c(8,830, 160477, 96219, 92908)
cov_dframe <- data.frame(countryNames, totalCases, totalDeath )
totalDeath <- c(8,830,556891, 160477, 96219, 92908)
cov_dframe <- data.frame(countryNames, totalCases, totalDeath )
cov_dframe
totalCases <- c(588,30639264,  11734058, 4483471, 4313073)
totalDeath <- c(8,830,556891, 160477, 96219, 92908)
cov_dframe <- data.frame(countryNames, totalCases, totalDeath )
countryNames <-  c("Bangladesh", "USA", "India", "Russia", "France")
totalCases <- c(588132,30639264,  11734058, 4483471, 4313073)
totalDeath <- c(8830,556891, 160477, 96219, 92908)
cov_dframe <- data.frame(countryNames, totalCases, totalDeath )
cov_dframe
data(mtcars)
str(mtcars)
data(mtcars)
str(mtcars)
sapply(mtcars, class)
newCars <- within(mtcars,{vs <- as.logical(vs)
am <- as.logical(am)
hp <- as.factor(hp) })
newCars
#
factor_gender_vector <- factor(speed_vector, ordered = TRUE,
levels = c("slow","medium","fast"))
factor_gender_vector
speed_vector <- c("medium","slow","slow","medium","fast","slow")
class(speed_vector)
table(speed_vector)
#
factor_gender_vector <- factor(speed_vector, ordered = TRUE,
levels = c("slow","medium","fast"))
factor_gender_vector
#levels = c("slow","medium","fast"))
factor_gender_vector <- factor(speed_vector, ordered = TRUE,
levels = c("medium","slow","fast"))
factor_gender_vector
#levels = c("slow","medium","fast"))
factor_gender_vector <- factor(speed_vector, ordered = TRUE,
levels = c("slow","medium","fast"))
factor_gender_vector
summery(factor_gender_vector)
summary(factor_gender_vector)
head(mtcars)
str(mtcars)
head(mtcars)
head(mtcars,2)
tail(mtcars)
table(mtcars$vs)
name <- c("Mercury",'Venus',"Earth","Mars","Juoiter")
type <- c("Teristeral planet","Teristeral planet","Teristeral planet","Gas Planet","Gas planet")
diameter <- c(0.382, 0.941,0.346,2.489,8.0002)
rotation <- c(58.64,-0.234,12.999,-0.273,12.92)
rings <- c(FALSE,FALSE,FALSE,FALSE,TRUE)
planet_df <- data.frame(name,type,diameter,rotation,rings)
planet_df
str(planet_df)
name <- c("Mercury",'Venus',"Earth","Mars","Jupiter","Saturn","Uranus","Pluto")
type <- c("Teristeral planet","Teristeral planet","Teristeral planet","Teristeral planet","Gas Planet","Gas Planet","Gas Planet","Gas planet")
diameter <- c(0.382, 0.941,0.346,2.489,8.0002,0.999,1.9222,2.0003)
rotation <- c(58.64,-0.234,12.999,-0.273,12.92,-9.882,12.877,-2.999)
rings <- c(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,TRUE,TRUE)
planet_df <- data.frame(name,type,diameter,rotation,rings)
planet_df
str(planet_df)
#sUBSETTING DATAFRAME
planet_df(1,3)
#sUBSETTING DATAFRAME
planet_df[1,3]
planet_df[4, ]
planet_df[1:4,"diameter"]
x>5 & x<13
#Logical Operation
x <- 12
x>5 & x<13
x<5 | x>13
x <- 2
!(x < 5)
##3#####3#List
#List can be vector, matrix, dataframe
#list as dataframe
my_list <- mtcars[1:5, ]
my_list
my_mat <- matrix(1:9, ncol = 3)
#list as dataframe
my_list <- mtcars[1:5, ]
my_list
#list as dataframe
my_df <- mtcars[1:5, ]
my_df
#creating list different element
my_list <- list(my_vec,my_mat,my_df)
my_list
##3#####3#List
#List can be vector, matrix, dataframe
my_vec <- c("Mercury",'Venus',"Earth","Mars","Jupiter","Saturn","Uranus","Pluto")
my_mat <- matrix(1:9, ncol = 3)
#list as dataframe
my_df <- mtcars[1:5, ]
my_df
#creating list different element
my_list <- list(my_vec,my_mat,my_df)
my_list
#Adding name
my_list1 <- list(Vector=my_vec,Matrix=my_mat,Data Frame=my_df)
my_list1
#Adding name
my_list1 <- list(Vector=my_vec,Matrix=my_mat,DataFrame=my_df)
my_list1
View(my_list1)
View(my_list)
View(my_list)
View(my_list1)
View(my_list1)
x
x[2]
x <- list(foo= 1:6, bar = 0.6)
x
x[2]
x[[2]]
x$foo
x$bar
x["bar"]
x <- list(foo= 1:6, bar = 0.6, baz="Hello")
x [c(1,3)]
#subsetting nested elements of a list
x <- list(a=list(10,12,14), b=c(3.14,2.81))
x
#When to use  dbl brakets
x[[c(1,3)]]
#same output
x[[1][3]]
#same output
x[[1]][[3]]
# mean = total/n
y <- c(5,4,3)
# mean = total/n
y <- c(5,4,3)
mean(y)
sum(y)
length(y)
mean_y <- function(x)
{
sum(x) / length(x)
}
mean_y(y)
y <- c(3,6,9)
mean_y(a)
library(lubridate)
my_time <- as.POSIXct("1947-08-15 00:00:00")
my_time
class(my_time)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
hist(mtcars$mpg)
install.packages("tidyverse")
gapminder %>%
mean(continet)
gapminder %>%
median(continet)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#Step 2: Calculate the missing percentage of each column using a function.
#If any column has missing data more than 5%,
#please remove it. (Do not try this for rows)
na_percent = function(x){
(sum(is.na(x))/length(x))*100
}
#Step 2: Calculate the missing percentage of each column using a function.
#If any column has missing data more than 5%,
#please remove it. (Do not try this for rows)
na_percent = function(x){
(sum(is.na(x))/length(x))*100
}
na_percentage = apply(clean_data3, 2, na_percent)
#Step 1 -Keep rows containing country information and remove the rest of the rows
install.packages("tidyverse")
library(tidyverse)
install.packages("dplyr")
library(dplyr)
install.packages("DT")
raw_data = read.csv("Covid19.csv")
setwd("D:/dataScience/gitDSD/GreyCampus-DS3/Statistics/Assignments/Assignment3_By_Umme_Rubaiyat_Chowdhury")
raw_data = read.csv("Covid19.csv")
#Remove first 8 rows
clean_data = slice(raw_data, 9:n())
view (clean_data)
#Step 1 -Keep rows containing country information and remove the rest of the rows
install.packages("tidyverse")
library(tidyverse)
install.packages("dplyr")
library(dplyr)
library(DT)
library(moments)
library(ggplot2)
raw_data = read.csv("Covid19.csv")
#Remove first 8 rows
clean_data = slice(raw_data, 9:n())
view (clean_data)
#Remove last 8 rows
clean_data = slice (clean_data, 1:221)
view (clean_data)
#remove first and second column
clean_data2 = clean_data[-1:-2]
view (clean_data2)
# Replace nul values with 'Na'
clean_data3 = clean_data2 %>% replace (.=="", NA)
#Step 2: Calculate the missing percentage of each column using a function.
#If any column has missing data more than 5%,
#please remove it. (Do not try this for rows)
na_percent = function(x){
(sum(is.na(x))/length(x))*100
}
na_percentage = apply(clean_data3, 2, na_percent)
na_percentage = which(na_percentage>10)
na_percentage
clean_data4 = clean_data3[-na_perc]
clean_data4 = clean_data3[-na_percentage]
view(clean_data4)
str(clean_data4)
colnames(clean_data4) = c("Country", "TotalCases", "TotalDeaths",
"TotalRecovered", "ActiveCases",
"TotalCasesperMillionPopulation",
"Deathspermillionpopulation",
"Totaltests", "Testpermillionpopulation",
"Population", "Continent", "XcasepereveryXppl",
"XdeathpereveryXppl", "XtestpereveryXppl")
view(clean_data4)
colnames(clean_data4) = c("Country", "TotalCases", "TotalDeaths",
"TotalRecovered", "ActiveCases",
"TotalCasesperMillionPopulation",
"DeathsperMillionPopulation",
"TotalTests", "TestperMillionPopulation",
"Population", "Continent", "XcasepereveryXppl",
"XdeathpereveryXppl", "XtestpereveryXppl")
#converting variables to correct datatypes
clean_data2$Continent = as.factor(clean_data2$Continent)
#converting variables to correct datatypes
clean_data4$Continent = as.factor(clean_data4$Continent)
for (i in c(2:10, 12:14)){
clean_data4[, i] = as.numeric(gsub(",", "", clean_data4[,i]))
}
view(clean_data4)
str(clean_data4)
summary (clean_data4)
boxplot(clean_data4$TotalCases)
boxplot(clean_data4$TotalDeaths)
boxplot(clean_data4$TotalRecovered)
boxplot (cbind(clean_data4$TotalCases, clean_data4$TotalDeaths, clean_data4$TotalRecovered), main = 'Cases',
names = c("Total cases", "Total Deaths", "Total Recover"), frame = TRUE, na.rm = TRUE)
install.packages("ggpubr")
library("ggpubr")
ggdensity(clean_data4$TotalCases,
main = "Density plot for Total Cases",
xlab = "Total Cases")
ggdensity(clean_data4$TotalDeaths,
main = "Density plot for Total Cases",
xlab = "Total Cases")
ggdensity(clean_data4$TotalRecovered,
main = "Density plot for Total Cases",
xlab = "Total Cases")
plot(clean_data2$TotalCases, clean_data2$Population, type="p")
plot(clean_data4$TotalCases, clean_data4$Population, type = "b")  #scatterplot
cor(clean_data4$TotalCases, clean_data4$Population, method = c("pearson"))
cor(clean_data4$TotalCases, clean_data4$Population, method = c("pearson"))
plot(clean_data4$TotalCasesperMillionPopulation, clean_data4$Population, type = "b")
clean_data4 %>% ggplot (aes(x = TotalCases, y = TotalDeaths))
+ geom_point(alpha = 0.5, color = "red")
ggplot(clean_data4, aes(x = TotalCases, y = TotalDeaths ))+
geom_point(alpha = 0.5)+
stat_smooth(method = "lm", col = "black", se = FALSE)
ggplot(clean_data4, aes(x = TotalCases, y = TotalDeaths ))+
geom_point(alpha = 0.5)+   + labs(title = "cases and deaths",
x = "Total Cases",
y="Total Deaths")
ggplot(clean_data4, aes(x = TotalCases, y = TotCasesPerMilPop ))+
geom_point(alpha = 0.5)+
stat_smooth(method = "lm", col = "red", se = FALSE)
ggplot(clean_data4, aes(x = TotalCases, y = DeathsperMillionPopulation ))+
geom_point(alpha = 0.5)+
stat_smooth(method = "lm", col = "red", se = FALSE)
#checking again with log values
ggplot(clean_data4, aes(y=DeathsperMillionPopulation , x=TotalCases)) +
geom_point()  +
coord_fixed()+
scale_x_log10()+
scale_y_log10()+
stat_smooth(method = "lm", col = "red", se = FALSE)
ggplot(clean_data2, aes(x= Continent, y= TotalCasesperMillionPopulation, fill=Continent)) +
geom_bar(position = "dodge", stat = "identity")
ggplot(clean_data2, aes(x= Continent, y= TotalCasesperMillionPopulation, fill=Continent)) +
geom_bar(position = "dodge", stat = "identity")
ggplot(clean_data2, aes(x= Continent, y= TotalCasesperMillionPopulation, fill=Continent)) +
geom_bar(position = "dodge", stat = "identity")
ggplot(clean_data4, aes(x= Continent, y= TotalCasesperMillionPopulation, fill=Continent)) +
geom_bar(position = "dodge", stat = "identity")
ggplot(clean_data4, aes(x= Continent, y=Deathspermillionpopulation, fill=Continent)) +
geom_bar(position = "dodge", stat = "identity")
ggplot(clean_data4, aes(x= Continent, y=DeathsperMillionPopulation, fill=Continent)) +
geom_bar(position = "dodge", stat = "identity")
sort(clean_data4$XtestpereveryXppl)
clean_data4$Country[which.max(clean_data4$XtestpereveryXppl)]
clean_data4$Country[which.min(clean_data4$XtestpereveryXppl)]
ggplot(clean_data4, aes(x= Continent, y=TestperMillionPopulation, fill=Continent)) +
geom_bar(position = "dodge", stat = "identity")
ggdensity(clean_data4$TestperMillionPopulation,
main = "Density plot for Test per Million Population")
summary(clean_data2$TestperMillionPopulation)
