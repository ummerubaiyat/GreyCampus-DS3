setwd("D:/dataScience/gitDSD/GreyCampus-DS3/Statistics/Assignments/Assignment4_By_Umme_Rubaiyat_Chowdhury")
Degree <- 10747
No.degree <- 67135
Agree <- 28193
Dont.Agree <- 49689
Total <- 77882
Agree.and.degree <- 2803
No.degree.and.disagree <- 41745
Agree.Unioun.Degree <- Agree + Degree - Agree.and.degree
#Probability of union of Agree and Degree
P1 <- Agree.Unioun.Degree/Total
#Probability of Agree, Degree
P2 <- (Agree/Total) + (Degree/Total)
#check if Prob(agree U degree) = Prob (Agree) + Prob(Degree)
if(P1 == P2){
print("Yes, they are disjoin events")
}else{
print("No, they are not disjoint events")
}
install.packages("VennDiagram")
install.packages("VennDiagram")
install.packages("grid")
install.packages("futile.logger")
library(VennDiagram)
pop <- 77882
a <- pop*0.362
pa <- a/pop # Probability of event A
b <- pop*0.138
pb <- b/pop # Probability of event B
both <- pop*0.036
pboth <- both/pop # Probability of A intersection B
# Plotting the Venn Diagram for both event probabilities
grid.newpage()  # Move to new plotting page
draw.pairwise.venn(area1 = pa,   # Create pairwise venn diagram
area2 = pb,
cross.area = pboth,
lty = "blank",
fill = c("pink", "green"),
category = c("A","B"))
population <- 77882
event_A <- pop*0.362
probability_event_A <- event_A/population # Probability of event A
event_B <- population*0.138
probability_event_B <- event_B/population # Probability of event B
both <- population*0.036
p_A_and_B <- both/population # Probability of A intersection B
# Plotting the Venn Diagram for both event probabilities
grid.newpage()  # Move to new plotting page
draw.pairwise.venn(A = event_A,   # Creating a pairwise venn diagram
B = event_B,
cross.area = p_A_and_B,
lty = "blank",
fill = c("red", "blue"),
category = c("A","B"))
draw.pairwise.venn(area1 = event_A,   # Creating a pairwise venn diagram
B = event_B,
cross.area = p_A_and_B,
lty = "blank",
fill = c("red", "blue"),
category = c("A","B"))
draw.pairwise.venn(area1 = event_A,   # Creating a pairwise venn diagram
area2 = event_B,
cross.area = p_A_and_B,
lty = "blank",
fill = c("red", "blue"),
category = c("A","B"))
draw.pairwise.venn(area1 = event_A,   # Creating a pairwise venn diagram
area2 = event_B,
cross.area = p_A_and_B,
lty = "blank",
fill = c("pink", "green"),
category = c("A","B"))
population <- 77882
event_A <- pop*0.362
probability_event_A <- event_A/population # Probability of event A
event_B <- population*0.138
probability_event_B <- event_B/population # Probability of event B
both <- population*0.036
p_A_and_B <- both/population # Probability of A intersection B
# Plotting the Venn Diagram for both event probabilities
grid.newpage()  # Move to new plotting page
draw.pairwise.venn(area1 = event_A,   # Creating a pairwise venn diagram
area2 = event_B,
cross.area = p_A_and_B,
lty = "blank",
fill = c("pink", "green"),
category = c("A","B"))
draw.pairwise.venn(area1 = probability_event_A,   # Creating a pairwise venn diagram
area2 = probability_event_B,
cross.area = p_A_and_B,
lty = "blank",
fill = c("pink", "green"),
category = c("A","B"))
library(VennDiagram)
population <- 77882
event_A <- pop*0.362
probability_event_A <- event_A/population # Probability of event A
event_B <- population*0.138
probability_event_B <- event_B/population # Probability of event B
both <- population*0.036
p_A_and_B <- both/population # Probability of A intersection B
# Plotting the Venn Diagram for both event probabilities
grid.newpage()  # Move to new plotting page
draw.pairwise.venn(area1 = probability_event_A,   # Creating a pairwise venn diagram
area2 = probability_event_B,
cross.area = p_A_and_B,
lty = "blank",
fill = c("pink", "green"),
category = c("A","B"))
draw.pairwise.venn(area1 = probability_event_A,   # Creating a pairwise venn diagram
area2 = probability_event_B,
cross.area = p_A_and_B,
lty = "blank",
fill = c("red", "blue"),
category = c("A","B"))
#Probability of (Agree or Degree) = Agree + degree - intersection of Agree, Degree
Probability = 0.138+0.362-0.036
View(Probability)
Question 4: What percent of the world population do not have a university degree
#Probability of (Agree or Degree) = Agree + degree - intersection of Agree, Degree
Probability_A_or_B = 0.138+0.362-0.036
View(Probability)
#Ans:
p_not_A_and_B <- 1- Probability_A_or_B
p_not_A_and_B * 100
#Prob(A and B):
p1 <- Agree.and.degree/Total
#Prob(A):
Prob.Agree <- Agree/Total
#Prob(B):
Prob.Degree <- Degree/Total
p2 <- Prob.Agree * Prob.Degree
#If true: Prob(Agree and Degree) = Prob(Agree) x Prob(Degree)
if(p1 == p2){
print("Yes, they are independent events")
}else{
print("No, they are not independent events")
}
library(data.tree)
Swa_tree <- Node$new("Total Pop.")
HIV <- Swa_tree$AddChild("HIV")
HIV_accurate <- HIV$AddChild("Accurate")
HIV_inaccurate <- HIV$AddChild("Inaccurate")
HIV <- Swa_tree$AddChild("HIV")
HIV_accurate <- HIV$AddChild("Accurate")
library(data.tree)
Swa_tree <- Node$new("Total Pop.")
HIV <- Swa_tree$AddChild("HIV")
HIV_accurate <- HIV$AddChild("Accurate")
HIV_inaccurate <- HIV$AddChild("Inaccurate")
No_HIV <- Swa_tree$AddChild("No HIV")
library(data.tree)
Swa_tree <- Node$new("Total Pop.")
HIV <- Swa_tree$AddChild("HIV")
p_HIV <- 0.259
p_not_HIV < 1 - p_HIV
p_Positive_Given_HIV >- 0.997
p_Negative_Given_Not_HIV <- 0.926
p_Positive_Given_Not_HIV <- 1 - p_Negative_Given_Not_HIV
p_Negative_Given_HIV >- 1- p_Positive_Given_Not_HIV
p_HIV_and_Positive <- p_HIV * p_Positive_Given_HIV
p_HIV_and_Negative <- p_HIV * p_Negative_Given_HIV
p_not_HIV_and_Negative <- p_not_HIV * p_Negative_Given_Not_HIV
p_not_HIV_and_Positive <- p_not_HIV * p_Positive_Given_Not_HIV
p_Positive <- p_HIV_and_Positive + p_not_HIV_and_Positive
p_HIV_Given_Positive <- p_HIV_and_Positive / p_Positive
p_HIV_Given_Positive
p_HIV <- 0.259
p_not_HIV < 1 - p_HIV
p_not_HIV <- 1 - p_HIV
p_Positive_Given_HIV >- 0.997
p_HIV <- 0.259
p_not_HIV <- 1 - p_HIV
p_Positive_Given_HIV <- 0.997
p_Negative_Given_Not_HIV <- 0.926
p_Positive_Given_Not_HIV <- 1 - p_Negative_Given_Not_HIV
p_Negative_Given_HIV <- 1- p_Positive_Given_Not_HIV
p_HIV_and_Positive <- p_HIV * p_Positive_Given_HIV
p_HIV_and_Negative <- p_HIV * p_Negative_Given_HIV
p_not_HIV_and_Negative <- p_not_HIV * p_Negative_Given_Not_HIV
p_not_HIV_and_Positive <- p_not_HIV * p_Positive_Given_Not_HIV
p_Positive <- p_HIV_and_Positive + p_not_HIV_and_Positive
p_HIV_Given_Positive <- p_HIV_and_Positive / p_Positive
p_HIV_Given_Positive
#Ans:
dbinom(8, 10, 0.13)   #2.77842e-06.
#Ans:
dbinom(8, 10, 0.13)   #2.77842e-06.
#Ans:
dbinom(8, 10, 0.13)   #2.77842e-06.
#Ans: #2.77842e-06.
dbinom(8, 10, 0.13)
#Ans:
sum(dbinom(70:245, size = 245, p = 0.25))
dbinom(6, 10, 0.56)
dbinom(6, size =  10, p= 0.56)
